{
    "id": "blank_component_1725032391",
    "name": "blank-component",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "<template>\n  <div class=\"container mx-auto p-4 bg-white bg-opacity-20 backdrop-blur-lg rounded-lg shadow-lg\">\n    <h1 class=\"text-2xl font-bold mb-4 text-fuchsia-600\">Wrap Ether (WETH9)</h1>\n    <div class=\"mb-4\">\n      <button @click=\"connectWallet\" class=\"bg-fuchsia-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-fuchsia-700 transition duration-300\">\n        {{ walletConnected ? 'Wallet Connected' : 'Connect Wallet' }}\n      </button>\n    </div>\n    <div class=\"mb-4\">\n      <label for=\"amount\" class=\"block mb-2\">Amount of Ether to Wrap:</label>\n      <input\n        id=\"amount\"\n        v-model=\"amount\"\n        type=\"number\"\n        min=\"0\"\n        step=\"0.01\"\n        class=\"w-full p-2 border border-fuchsia-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-fuchsia-600\"\n        placeholder=\"Enter amount in ETH\"\n      />\n    </div>\n    <button\n      @click=\"wrapEther\"\n      :disabled=\"!walletConnected || !amount\"\n      class=\"bg-fuchsia-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-fuchsia-700 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n    >\n      Wrap Ether\n    </button>\n    <div v-if=\"result\" class=\"mt-4 p-4 bg-white bg-opacity-30 rounded-lg shadow-md\">\n      <h2 class=\"text-lg font-semibold mb-2\">Transaction Result:</h2>\n      <p>{{ result }}</p>\n    </div>\n    <div v-if=\"error\" class=\"mt-4 p-4 bg-red-100 text-red-700 rounded-lg shadow-md\">\n      <h2 class=\"text-lg font-semibold mb-2\">Error:</h2>\n      <p>{{ error }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ethers } from 'ethers'\n\nexport default {\n  name: 'WrapEther',\n  data() {\n    return {\n      walletConnected: false,\n      amount: '',\n      result: '',\n      error: '',\n      contract: null,\n      contractABI: [\n        {\n          name: \"deposit\",\n          stateMutability: \"payable\",\n          inputs: [],\n          outputs: []\n        }\n      ],\n      contractAddress: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n    }\n  },\n  mounted() {\n    this.initWalletConnection()\n  },\n  methods: {\n    async initWalletConnection() {\n      if (window.ethereum) {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' })\n          this.walletConnected = true\n          const provider = new ethers.BrowserProvider(window.ethereum)\n          const signer = await provider.getSigner()\n          this.contract = new ethers.Contract(this.contractAddress, this.contractABI, signer)\n        } catch (err) {\n          this.error = 'Failed to connect wallet: ' + err.message\n        }\n      } else {\n        this.error = 'MetaMask is not installed'\n      }\n    },\n    async connectWallet() {\n      if (window.ethereum) {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' })\n          this.walletConnected = true\n          this.error = ''\n        } catch (err) {\n          this.error = 'Failed to connect wallet: ' + err.message\n        }\n      } else {\n        this.error = 'MetaMask is not installed'\n      }\n    },\n    async wrapEther() {\n      if (!this.walletConnected) {\n        this.error = 'Please connect your wallet first'\n        return\n      }\n\n      if (!this.amount || this.amount <= 0) {\n        this.error = 'Please enter a valid amount'\n        return\n      }\n\n      try {\n        const amountInWei = ethers.parseEther(this.amount)\n        const tx = await this.contract.deposit({ value: amountInWei })\n        await tx.wait()\n        this.result = `Successfully wrapped ${this.amount} ETH to WETH`\n        this.error = ''\n      } catch (err) {\n        this.error = 'Failed to wrap Ether: ' + err.message\n        this.result = ''\n      }\n    }\n  }\n}\n</script>"
    },
    "w": 12,
    "h": 12,
    "x": 0,
    "y": 32,
    "i": "3",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true
}